{"name":"Zonda","tagline":"Zonda——Degas自家用的前端框架。","body":"# Zonda\r\n\r\n[![Build Status](https://travis-ci.org/smallsmallwolf/Zonda.png?branch=master)](https://travis-ci.org/smallsmallwolf/Zonda)\r\n\r\n-------------\r\n\r\nZonda——Degas自家用的前端框架。\r\n\r\n感谢和我一起建造Zonda的朋友们，亲爱的[Niko](http://niko-blog.com/)，[leohgbs](https://github.com/leohgbs)，[bronze1man](http://bs.ikm.me/)。\r\n\r\nBUG还很多，发现一个修复一个。已在几个项目中使用，不断更新，不断学习~\r\n\r\n## Zonda行车手册\r\n\r\n**目前正在对整车进行重构，处于无法发动状态，技师正在紧张的修复中。**\r\n\r\n### 点火，起步！\r\n- - -\r\n\r\n`git clone https://github.com/smallsmallwolf/Zonda.git` 将Zonda拉到Web服务的文件根目录(Web服务器`/`的位置，放到这里主要是为了方便)，然后执行：\r\n\r\n```shell\r\ncd Zonda/tool\r\n./build.sh init\r\n```\r\n\r\n执行完毕后，Zonda会根据`Zonda/project-template`创建一个前端项目模板，目录结构大致是这样的：\r\n\r\n```coffeescript\r\nassets/ # 前端项目根目录\r\n  etc/ # 项目配置文件  \r\n  vendor/ # 第三方组件\r\n    Zonda/   \r\n  src/ # 你的应用程序源代码 \r\n  ui/ # 你的应用程序的UI文件\r\n    less/\r\n      config.less\r\n      mixin.less\r\n      responsive.less\r\n    images/\r\n    ie/\r\n      ie.css      \r\n  test/ # 测试你的应用程序  \r\n  dist/ # 线上版本的应用程序代码\r\n    dist-dev.css\r\n    framework-dev.js\r\n    app-dev.js   \r\n  tool/ # 工具(打包应用程序，Less编译工具等等)\r\n```\r\n\r\n页面上将要引入的CSS和Javascript文件如下：\r\n\r\n```html\r\n<!DOCTYPE HTML>\r\n<html lang=\"en\">\r\n<head>\r\n  <meta charset=\"UTF-8\">\r\n  <title>Let's Rock!</title>\r\n  <link rel=\"stylesheet\" href=\"/assets/dist/dist-dev.css\" />\r\n</head>\r\n<body>\r\n\r\n... \r\n\r\n<script src=\"/assets/dist/framework-dev.js\" id=\"seajsnode\" data-main=\"/assets/dist/app-dev.js\" ></script>\r\n  \r\n</body>\r\n</html>\r\n```\r\n\r\nNice，Zonda现在已经发动了，驾驶着它在前端的赛道上驰骋吧~\r\n\r\n### CSS/Less & Images\r\n- - -\r\n\r\nLess dir: `assets/ui/less`，放置你的项目的样式\r\n\r\nImages dir: `assets/ui/images`，你项目中用到的图片文件\r\n\r\nBootstrap dir: `assets/vendor/Zonda/ui/less`，Zonda默认提供使用Bootstrap作为UI基础，在`assets/ui/less/config.less`中，`@import`了Bootstrap的Less源文件，如果不需要Bootstrap，可以在`config.less`将该行注释，但真心不建议这么做，Bootstrap可是个好东西。\r\n\r\nLess实时编译工具，这个工具可能有点小Bug，欢迎Issue：\r\n\r\n```shell\r\ncd assets/tool\r\n./less-compile.sh\r\n```\r\n\r\n执行上面的命令将会开始监听`assets/ui/less`目录，如果文件有修改，则会编译，并将所有`@import`的Less编译成一个CSS文件(包括Bootstrap和Font Awesome)输出到`assets/dist/dist-dev.css`，也就是页面上引入的那个CSS文件。\r\n\r\nLess编译工具使用NodeJs(v0.8.21)和Lessc(v1.3.3)，源文件在`tool/module/lessCompiler.coffee`。它目前只能提供简单的监听文件改变并编译的功能，并且将所有的Less文件编译成一个CSS。\r\n\r\n`lessCompiler.coffee`默认会将Less中的注释去掉，如果需要保留注释以便调试，则将文件中的：\r\n\r\n```coffeescript\r\nlessc_command = \"lessc -x\"\r\n# 去掉 -x，改成下面这样即可\r\nlessc_command = \"lessc\"\r\n```\r\n\r\n`lessCompiler.coffee`缺少一个不将Less合并成一个CSS的功能，还缺少将`dist-dev.css`压缩的功能，以后会尝试实现的，欢迎Issue~\r\n\r\n### JavaScript\r\n- - -\r\n\r\nJavascript dir: `assets/src`，这里放置你的项目源代码。如果使用CoffeeScript，那么直接将Coffee文件编译到当前目录下就行了，推荐一个Vim-CoffeeScript插件[vim-coffee-script](https://github.com/kchmck/vim-coffee-script)\r\n\r\nZonda dir: `assets/vendor/Zonda`，这里是Zonda的框架代码，框架里已经包含了一些必要的库，都已做成seajs module，包括：\r\n\r\n```\r\nSeaJs v2.0.0pre\r\njQuery v1.9.1\r\nUnderscore\r\nBackbone\r\nBootstrap(jQuery plugins)\r\nMustache\r\n```\r\n\r\n### 开发模式(dev)与线上模式(prod)\r\n- - -\r\n\r\n```shell\r\ncd assets/tool/\r\n\r\n# 切换至开发模式：生成 framework-dev.js，app-dev.js\r\n./build.sh dev\r\n\r\n# 切换至线上模式：生成 framework-version.js，app-version.js\r\n./build.sh prod\r\n```\r\n\r\n**DEV模式**\r\n\r\n期望实现的目标：不压缩合并任何应用代码和第三方模块。\r\n\r\n`/assets/dist/framework-dev.js`\r\n实现思路：\r\n在开发模式下(dev)，该文件就是 SeaJs 源码 + SeaJs plugin(没有加入 combo，flush插件);\r\nSeaJs 的配置文件为 env.js (以后有时间了可以考虑使用 Yaml，或者直接 CoffeeScript )，用工具将 `assets/vendor/Zonda/vendor` 以及 `assets/vendor/` 读取一遍，生成出 env.js 需要使用的 SeaJs 的 `alias`，然后将生成好的 env.js cat 到 SeaJs 源代码底部，当有第三方模块更新，或者 SeaJs 更新时，只需要重新执行 `./build.sh dev` 即可。\r\n\r\nenv.js 应该大概是这个样子：\r\n\r\n```javascript\r\nseajs.config({\r\n  base: \"/assets\",\r\n  alias: {\r\n    \"jquery\" : \"vendor/Zonda/vendor/jquery/1.9.1/jquery/src/jquery\"\r\n  },\r\n  charset: \"utf-8\"\r\n});\r\n```\r\n`assets/dist/app-dev.js`\r\n实现思路：\r\n在开发模式下(dev)，该文件只有一行：\r\n```javascript\r\nseajs.use(\"/assets/src/app\");\r\n```\r\n\r\n**PROD模式**\r\n\r\n期望实现的目标：将 SeaJS，jQuery 等第三方模块压缩合并到`framework-version.js`，将`src`下应用程序源码压缩合并到`app-version.js`，最终将 Javascript 文件的连接数优化为2个，并且带有文件MD5值的版本号，以便控制其发布。\r\n\r\n`assets/dist/framework-version.js`\r\n实现思路：\r\n在线上模式(prod)，该文件包含了`framework-dev.js`，`vendor/`下的各个第三方模块。\r\n\r\n`assets/dist/app-version.js`\r\n实现思路：\r\n在线上模式(prod)，该文件为`assets/src/app-version.js`将其`src`内的依赖打包合并后的文件，需要在最后一行加上：\r\n```javascript\r\nseajs.use(\"/assets/dist/app.js\");\r\n```\r\n\r\n以便 SeaJS 将它视作应用入口。\r\n\r\n**spm build**\r\n\r\n这里使用`spm`工具来实现 prod 模式，但是 spm 没有实现这里\"将第三方模块与应用程序代码分别打包\"的需求，所以目前只能手动解决，那就是配置`package.json`：\r\n```json\r\n{\r\n  \"name\" : \"Zonda-Project\",\r\n  \"version\" : \"\",\r\n  \"root\": \"/assets/dist\",\r\n  \"dependencies\" : {\r\n    \"jquery\" : \"jquery\"\r\n  },\r\n  \"output\" : {\r\n    \"app.js\" : \".\"\r\n  },\r\n  \"sources\": [\"http://module.zonda.dashu.us:22221\"]\r\n}\r\n```\r\n这里对`require(\"jquery\")`这样的第三方依赖没有做处理，是因为`jquery`模块已经打包压缩到`framework-version.js`中了，并且其模块ID为`env.js`中配置的`alias`所指明的ID。所以`app-version.js`中调用`require(\"jquery\")`时会根据`seajs.config`中`alias`的配置去调用，这里就没有问题了。\r\n\r\n需要注意的是这里将第三方模块打包到`framework-version.js`是由Zonda的工具来完成的，并不是由spm，所以`framework-version.js`里到底 combo 了哪些第三方模块，已经这些模块的顺序，全部都由`etc/package.json`中的`dependencies`决定的。\r\n\r\n### 调用框架模块\r\ndoing\r\n\r\n### 使用Qunit和Sinon测试\r\ndoing\r\n\r\n### 升级Zonda\r\ndoing\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}